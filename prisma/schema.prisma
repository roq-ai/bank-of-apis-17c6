generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model account {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  account_number String        @db.VarChar(255)
  account_type   String        @db.VarChar(255)
  balance        Int
  bank_id        String        @db.Uuid
  user_id        String        @db.Uuid
  created_at     DateTime      @default(now()) @db.Timestamp(6)
  updated_at     DateTime      @default(now()) @db.Timestamp(6)
  bank           bank          @relation(fields: [bank_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transaction    transaction[]
}

model bank {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  account     account[]
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model credit_card {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  card_number   String   @db.VarChar(255)
  expiry_date   DateTime @db.Timestamp(6)
  cvv           Int
  due_date      DateTime @db.Timestamp(6)
  maximum_limit Int
  user_id       String   @db.Uuid
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  user          user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model financial_advisor {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  advisor_name   String   @db.VarChar(255)
  contact_number String   @db.VarChar(255)
  email          String   @db.VarChar(255)
  user_id        String   @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  user           user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model transaction {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transaction_type String   @db.VarChar(255)
  amount           Int
  transaction_date DateTime @db.Timestamp(6)
  account_id       String   @db.Uuid
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  account          account  @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String              @unique @db.VarChar(255)
  firstName         String?             @db.VarChar(255)
  lastName          String?             @db.VarChar(255)
  roq_user_id       String              @db.VarChar(255)
  tenant_id         String              @db.VarChar(255)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  account           account[]
  bank              bank[]
  credit_card       credit_card[]
  financial_advisor financial_advisor[]
}
